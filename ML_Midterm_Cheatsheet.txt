
MACHINE LEARNING MIDTERM CHEATSHEET
===================================

---
LIBRARIES TO IMPORT
-------------------
# Basic Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Data Splitting & Validation
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV

# Preprocessing
from sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder
from sklearn.impute import SimpleImputer

# Supervised Learning
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, VotingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC, LinearSVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression, Perceptron, SGDClassifier
from sklearn.naive_bayes import GaussianNB

# Unsupervised Learning
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN

# Evaluation Metrics
from sklearn import metrics

---
DATA LOADING & EXPLORATION
--------------------------
input_data = pd.read_csv('filename.csv')
input_data.head()
input_data.info()
input_data.describe()
input_data.shape
input_data.isnull().sum()
input_data['column'].value_counts()

---
DATA PREPROCESSING
------------------
# Dropping duplicates
input_data.drop_duplicates(inplace=True)

# Imputing missing values
imp_cat = SimpleImputer(strategy='most_frequent')
input_data[['col1', 'col2']] = imp_cat.fit_transform(input_data[['col1','col2']])

# Encoding categorical variables
label_encoder = LabelEncoder()
input_data['category_encoded'] = label_encoder.fit_transform(input_data['category'])

# One-Hot Encoding
input_data = pd.get_dummies(input_data, columns=['categorical_col'], dtype=int)

# Feature scaling
scaler = StandardScaler()
scaled_data = scaler.fit_transform(input_data)

---
DATA SPLITTING
---------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y, random_state=0)

---
MODEL TRAINING & EVALUATION
---------------------------
# Train a Random Forest (default)
rf = RandomForestClassifier(random_state=0)
rf.fit(X_train, y_train)
predictions = rf.predict(X_test)

# Evaluation Metrics
accuracy = metrics.accuracy_score(y_test, predictions)
confusion = metrics.confusion_matrix(y_test, predictions)
classification_report = metrics.classification_report(y_test, predictions)

---
HYPERPARAMETER TUNING
---------------------
# RandomizedSearchCV
params = {
    'n_estimators': [10, 50, 100],
    'max_depth': [5, 10, None]
}

random_search = RandomizedSearchCV(RandomForestClassifier(random_state=0),
                                   param_distributions=param_grid,
                                   n_iter=10,
                                   cv=10,
                                   n_jobs=-1,
                                   random_state=0)
random_search.fit(X_train, y_train)

best_model = random_search.best_estimator_

---
PCA & CLUSTERING
----------------
# PCA
pca = PCA(n_components=2)
pc_scores = pca.fit_transform(scaled_data)

# Explained variance
explained_variance = pca.explained_variance_ratio_

# K-Means Clustering (Elbow Method)
sse = []
K = range(2, 10)
for k in K:
    km = KMeans(n_clusters=k, random_state=1)
    km.fit(scaled_data)
    sse.append(km.inertia_)

# Optimal clusters from Elbow method
optimal_k = 4  # Example from elbow plot
kmeans_optimal = KMeans(n_clusters=optimal_k, random_state=1)
clusters = kmeans_opt.fit_predict(scaled_data)

---
GENERAL TIPS
------------
- Always check data for missing or incorrect types first.
- Use stratification in train-test split for classification tasks.
- Clearly handle missing values (imputation).
- Scale numerical features for consistency.
- Use classification reports (precision, recall, F1) for imbalanced data.
- Use randomized search for quick hyperparameter tuning.

---
